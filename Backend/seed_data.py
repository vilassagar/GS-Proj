#!/usr/bin/env python3
"""
Seed data script for GramSevak application
Run this after database migration to populate initial data
"""

import sys
import os
from datetime import datetime

# Add the parent directory to Python path
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from sqlalchemy.orm import Session
from app.config import SessionLocal, engine
from app.models.roles import Role
from app.models.users import User
from app.models.users_hierarchy import District, Block, GramPanchayat
from app.models.department import Department
from app.models.gr_yojana import Yojana
from app.models.documents import DocumentType
from app.models.enums.user_designation import UserDesignation
from app.models.enums.approval_status import ApprovalStatus


def create_seed_data():
    """Create initial seed data for the application"""
    db: Session = SessionLocal()
    
    try:
        print("üå± Starting seed data creation...")
        
        # 1. Create Roles
        print("üìù Creating roles...")
        roles_data = [
            {"id": 1, "name": "superAdmin", "description": "Super Administrator with full access"},
            {"id": 2, "name": "districtAdmin", "description": "District Administrator"},
            {"id": 3, "name": "blockAdmin", "description": "Block Administrator"},
            {"id": 4, "name": "gramSevak", "description": "Gram Sevak/Village Worker"},
        ]
        
        for role_data in roles_data:
            existing_role = db.query(Role).filter(Role.name == role_data["name"]).first()
            if not existing_role:
                role = Role(**role_data)
                db.add(role)
                print(f"  ‚úÖ Created role: {role_data['name']}")
            else:
                print(f"  ‚è≠Ô∏è  Role already exists: {role_data['name']}")
        
        # 2. Create Departments
        print("üè¢ Creating departments...")
        departments_data = [
            {"name": "‡§ó‡•ç‡§∞‡§æ‡§Æ‡•Ä‡§£ ‡§µ‡§ø‡§ï‡§æ‡§∏ ‡§µ‡§ø‡§≠‡§æ‡§ó"},  # Rural Development Department
            {"name": "‡§Æ‡§π‡§ø‡§≤‡§æ ‡§Ü‡§£‡§ø ‡§¨‡§æ‡§≤ ‡§µ‡§ø‡§ï‡§æ‡§∏"},   # Women and Child Development
            {"name": "‡§∂‡§ø‡§ï‡•ç‡§∑‡§£ ‡§µ‡§ø‡§≠‡§æ‡§ó"},          # Education Department
            {"name": "‡§Ü‡§∞‡•ã‡§ó‡•ç‡§Ø ‡§µ‡§ø‡§≠‡§æ‡§ó"},          # Health Department
            {"name": "‡§ï‡•É‡§∑‡•Ä ‡§µ‡§ø‡§≠‡§æ‡§ó"},            # Agriculture Department
        ]
        
        for dept_data in departments_data:
            existing_dept = db.query(Department).filter(Department.name == dept_data["name"]).first()
            if not existing_dept:
                department = Department(**dept_data)
                db.add(department)
                print(f"  ‚úÖ Created department: {dept_data['name']}")
            else:
                print(f"  ‚è≠Ô∏è  Department already exists: {dept_data['name']}")
        
        # 3. Create Yojanas (Schemes)
        print("üìã Creating yojanas...")
        yojanas_data = [
            {"name": "‡§Æ‡§π‡§æ‡§§‡•ç‡§Æ‡§æ ‡§ó‡§æ‡§Ç‡§ß‡•Ä ‡§∞‡§æ‡§∑‡•ç‡§ü‡•ç‡§∞‡•Ä‡§Ø ‡§ó‡•ç‡§∞‡§æ‡§Æ‡•Ä‡§£ ‡§∞‡•ã‡§ú‡§ó‡§æ‡§∞ ‡§π‡§Æ‡•Ä ‡§Ø‡•ã‡§ú‡§®‡§æ"},  # MGNREGA
            {"name": "‡§™‡•ç‡§∞‡§ß‡§æ‡§®‡§Æ‡§Ç‡§§‡•ç‡§∞‡•Ä ‡§Ü‡§µ‡§æ‡§∏ ‡§Ø‡•ã‡§ú‡§®‡§æ"},                        # PM Housing Scheme
            {"name": "‡§∏‡•ç‡§µ‡§ö‡•ç‡§õ ‡§≠‡§æ‡§∞‡§§ ‡§Æ‡§ø‡§∂‡§®"},                              # Clean India Mission
            {"name": "‡§°‡§ø‡§ú‡§ø‡§ü‡§≤ ‡§á‡§Ç‡§°‡§ø‡§Ø‡§æ ‡§Ø‡•ã‡§ú‡§®‡§æ"},                           # Digital India
            {"name": "‡§Ü‡§Ø‡•Å‡§∑‡•ç‡§Æ‡§æ‡§® ‡§≠‡§æ‡§∞‡§§ ‡§Ø‡•ã‡§ú‡§®‡§æ"},                          # Ayushman Bharat
        ]
        
        for yojana_data in yojanas_data:
            existing_yojana = db.query(Yojana).filter(Yojana.name == yojana_data["name"]).first()
            if not existing_yojana:
                yojana = Yojana(**yojana_data)
                db.add(yojana)
                print(f"  ‚úÖ Created yojana: {yojana_data['name']}")
            else:
                print(f"  ‚è≠Ô∏è  Yojana already exists: {yojana_data['name']}")
        
        # 4. Create Document Types - Complete List with English Names
        print("üìÑ Creating document types...")
        document_types_data = [
            # Basic mandatory documents
            {"name": "‡§´‡•ã‡§ü‡•ã", "name_english": "Photo", "is_mandatory": True},
            {"name": "‡§Ü‡§ß‡§æ‡§∞ ‡§ï‡§æ‡§∞‡•ç‡§°", "name_english": "Adhar Card", "is_mandatory": True},
            {"name": "‡§™‡•Ö‡§® ‡§ï‡§æ‡§∞‡•ç‡§°", "name_english": "Pan Card", "is_mandatory": True},
            {"name": "‡§∞‡•á‡§∂‡§®‡§ï‡§æ‡§∞‡•ç‡§° ‡§™‡•ç‡§∞‡§§", "name_english": "Ration Card Copy", "is_mandatory": False},
            {"name": "‡§ú‡§®‡•ç‡§Æ‡§¶‡§æ‡§ñ‡§≤‡§æ", "name_english": "Birth Certificate", "is_mandatory": True},
            
            # Caste related documents
            {"name": "‡§ú‡§æ‡§§‡•Ä‡§ö‡§æ ‡§¶‡§æ‡§ñ‡§≤‡§æ", "name_english": "Caste Certificate", "is_mandatory": False},
            {"name": "‡§ú‡§æ‡§§ ‡§™‡§°‡§§‡§æ‡§≥‡§£‡•Ä ‡§™‡•ç‡§∞‡§Æ‡§æ‡§£‡§™‡§§‡•ç‡§∞", "name_english": "Cast Validation Certificate", "is_mandatory": False},
            
            # Travel document
            {"name": "‡§™‡§æ‡§∏‡§™‡•ã‡§∞‡•ç‡§ü", "name_english": "Passport", "is_mandatory": False},
            
            # Education documents - SSC
            {"name": "‡§¶‡§π‡§æ‡§µ‡•Ä ‡§ó‡•Å‡§£‡§™‡§§‡•ç‡§∞‡§ï", "name_english": "SSC Marklist", "is_mandatory": True},
            {"name": "‡§¶‡§π‡§æ‡§µ‡•Ä ‡§™‡•ç‡§∞‡§Æ‡§æ‡§£‡§™‡§§‡•ç‡§∞", "name_english": "SSC Certificate", "is_mandatory": True},
            
            # Education documents - HSC
            {"name": "‡§¨‡§æ‡§∞‡§æ‡§µ‡•Ä ‡§ó‡•Å‡§£‡§™‡§§‡•ç‡§∞‡§ï", "name_english": "HSC Marklist", "is_mandatory": False},
            {"name": "‡§¨‡§æ‡§∞‡§æ‡§µ‡•Ä ‡§™‡•ç‡§∞‡§Æ‡§æ‡§£‡§™‡§§‡•ç‡§∞", "name_english": "HSC Certificate", "is_mandatory": False},
            {"name": "‡§∂‡§æ‡§≥‡§æ ‡§∏‡•ã‡§°‡§≤‡•ç‡§Ø‡§æ‡§ö‡§æ ‡§¶‡§æ‡§ñ‡§≤‡§æ/TC", "name_english": "Leaving Certificate/Transcript Certificate", "is_mandatory": False},
            
            # Diploma
            {"name": "‡§™‡§¶‡§µ‡§ø‡§ï‡§æ ‡§ó‡•Å‡§£‡§™‡§§‡•ç‡§∞‡§ï", "name_english": "Diploma Marklist", "is_mandatory": False},
            {"name": "‡§™‡§¶‡§µ‡§ø‡§ï‡§æ ‡§™‡•ç‡§∞‡§Æ‡§æ‡§£‡§™‡§§‡•ç‡§∞", "name_english": "Diploma Certificate", "is_mandatory": False},
            
            # Degree
            {"name": "‡§™‡§¶‡§µ‡•Ä ‡§ó‡•Å‡§£‡§™‡§§‡•ç‡§∞‡§ï", "name_english": "Degree Marklist", "is_mandatory": False},
            {"name": "‡§™‡§¶‡§µ‡•Ä ‡§™‡•ç‡§∞‡§Æ‡§æ‡§£‡§™‡§§‡•ç‡§∞", "name_english": "Degree Certificate", "is_mandatory": False},
            
            # Post Graduate
            {"name": "‡§™‡§¶‡§µ‡•ç‡§Ø‡•Å‡§§‡•ç‡§§‡§∞ ‡§ó‡•Å‡§£‡§™‡§§‡•ç‡§∞‡§ï", "name_english": "Post Graduate Marklist", "is_mandatory": False},
            {"name": "‡§™‡§¶‡§µ‡•ç‡§Ø‡•Å‡§§‡•ç‡§§‡§∞ ‡§™‡•ç‡§∞‡§Æ‡§æ‡§£‡§™‡§§‡•ç‡§∞", "name_english": "Post Graduate Certificate", "is_mandatory": False},
            
            # PhD
            {"name": "‡§°‡•â‡§ï‡•ç‡§ü‡§∞‡•á‡§ü ‡§ó‡•Å‡§£‡§™‡§§‡•ç‡§∞‡§ï", "name_english": "PhD Marklist", "is_mandatory": False},
            {"name": "‡§°‡•â‡§ï‡•ç‡§ü‡§∞‡•á‡§ü ‡§™‡•ç‡§∞‡§Æ‡§æ‡§£‡§™‡§§‡•ç‡§∞", "name_english": "PhD Certificate", "is_mandatory": False},
            
            # Computer Certificate
            {"name": "MS-CIT", "name_english": "MS-CIT Certificate", "is_mandatory": False},
            
            # Appointment related documents
            {"name": "‡§®‡•á‡§Æ‡§£‡•Å‡§ï ‡§™‡§∞‡•Ä‡§ï‡•ç‡§∑‡§æ ‡§π‡•â‡§≤ ‡§§‡§ø‡§ï‡•Ä‡§ü", "name_english": "Hall Ticket of Exam", "is_mandatory": False},
            {"name": "‡§®‡•á‡§Æ‡§£‡•Å‡§ï ‡§Ü‡§¶‡•á‡§∂", "name_english": "Selection Order", "is_mandatory": True},
            {"name": "‡§π‡§ú‡§∞ ‡§Ö‡§∞‡•ç‡§ú", "name_english": "Application of Presence", "is_mandatory": False},
            {"name": "‡§™‡§ó‡§æ‡§∞ ‡§¨‡§Å‡§ï ‡§ñ‡§æ‡§§‡•á ‡§™‡§æ‡§∏‡§¨‡•Å‡§ï", "name_english": "Salary Account Bank Passbook", "is_mandatory": True},
            {"name": "‡§ì‡§≥‡§ñ‡§™‡§§‡•ç‡§∞", "name_english": "Identity Card", "is_mandatory": True},
            
            # Service related orders
            {"name": "‡§ï‡§æ‡§Ø‡§Æ ‡§ï‡•á‡§≤‡•á‡§ö‡§æ ‡§Ü‡§¶‡•á‡§∂", "name_english": "Permenent Order", "is_mandatory": False},
            {"name": "‡§∏‡•á‡§µ‡§æ ‡§™‡§∞‡•Ä‡§ï‡•ç‡§∑‡§æ ‡§â‡§§‡•ç‡§§‡•Ä‡§∞‡•ç‡§£ ‡§Ü‡§¶‡•á‡§∂", "name_english": "Service Exam Passed Order", "is_mandatory": False},
            {"name": "‡§∏‡•ç‡§•‡§æ‡§Ø‡§ø‡§§‡•ç‡§µ ‡§≤‡§æ‡§≠‡§æ‡§ö‡§æ ‡§Ü‡§¶‡•á‡§∂", "name_english": "Confirmation Order", "is_mandatory": False},
            
            # Assured Career Progression Scheme orders
            {"name": "12 ‡§µ‡§∞‡•ç‡§∑‡•á - ‡§∏‡•á‡§µ‡§æ‡§Ç‡§§‡§∞‡•ç‡§ó‡§§ ‡§Ü‡§∂‡•ç‡§µ‡§æ‡§∏‡§ø‡§§ ‡§™‡•ç‡§∞‡§ó‡§§‡•Ä ‡§Ø‡•ã‡§ú‡§®‡§æ ‡§Ü‡§¶‡•á‡§∂", "name_english": "12 Yrs-Sevantargat Ashwashit Pragati Yojana Benefit Order", "is_mandatory": False},
            {"name": "24 ‡§µ‡§∞‡•ç‡§∑‡•á - ‡§∏‡•á‡§µ‡§æ‡§Ç‡§§‡§∞‡•ç‡§ó‡§§ ‡§Ü‡§∂‡•ç‡§µ‡§æ‡§∏‡§ø‡§§ ‡§™‡•ç‡§∞‡§ó‡§§‡•Ä ‡§Ø‡•ã‡§ú‡§®‡§æ ‡§Ü‡§¶‡•á‡§∂", "name_english": "24 Yrs-Sevantargat Ashwashit Pragati Yojana Benefit Order", "is_mandatory": False},
            {"name": "10 ‡§µ‡§∞‡•ç‡§∑‡•á - ‡§∏‡•Å‡§ß‡§æ‡§∞‡§ø‡§§ ‡§∏‡•á‡§µ‡§æ‡§Ç‡§§‡§∞‡•ç‡§ó‡§§ ‡§Ü‡§∂‡•ç‡§µ‡§æ‡§∏‡§ø‡§§ ‡§™‡•ç‡§∞‡§ó‡§§‡•Ä ‡§Ø‡•ã‡§ú‡§®‡§æ ‡§Ü‡§¶‡•á‡§∂", "name_english": "10 Yrs-Sudharit Sevantargat Ashwashit Pragati Yojana Benefit Order", "is_mandatory": False},
            {"name": "20 ‡§µ‡§∞‡•ç‡§∑‡•á - ‡§∏‡•Å‡§ß‡§æ‡§∞‡§ø‡§§ ‡§∏‡•á‡§µ‡§æ‡§Ç‡§§‡§∞‡•ç‡§ó‡§§ ‡§Ü‡§∂‡•ç‡§µ‡§æ‡§∏‡§ø‡§§ ‡§™‡•ç‡§∞‡§ó‡§§‡•Ä ‡§Ø‡•ã‡§ú‡§®‡§æ ‡§Ü‡§¶‡•á‡§∂", "name_english": "20 Yrs-Sudharit Sevantargat Ashwashit Pragati Yojana Benefit Order", "is_mandatory": False},
            {"name": "30 ‡§µ‡§∞‡•ç‡§∑‡•á - ‡§∏‡•Å‡§ß‡§æ‡§∞‡§ø‡§§ ‡§∏‡•á‡§µ‡§æ‡§Ç‡§§‡§∞‡•ç‡§ó‡§§ ‡§Ü‡§∂‡•ç‡§µ‡§æ‡§∏‡§ø‡§§ ‡§™‡•ç‡§∞‡§ó‡§§‡•Ä ‡§Ø‡•ã‡§ú‡§®‡§æ ‡§Ü‡§¶‡•á‡§∂", "name_english": "30 Yrs-Sudharit Sevantargat Ashwashit Pragati Yojana Benefit Order", "is_mandatory": False},
            
            # Award and increment orders
            {"name": "‡§â‡§§‡•ç‡§ï‡•É‡§∑‡•ç‡§ü/‡§Ö‡§§‡§ø‡§â‡§§‡•ç‡§ï‡•É‡§∑‡•ç‡§ü ‡§µ‡•á‡§§‡§®‡§µ‡§æ‡§¢ ‡§Ü‡§¶‡•á‡§∂", "name_english": "Utkrushth/AtiUtkrushth Increment Order", "is_mandatory": False},
            {"name": "‡§Ü‡§¶‡§∞‡•ç‡§∂ ‡§ó‡•ç‡§∞‡§æ‡§Æ‡§∏‡•á‡§µ‡§ï ‡§™‡•Å‡§∞‡§∏‡•ç‡§ï‡§æ‡§∞ ‡§™‡•ç‡§∞‡§æ‡§™‡•ç‡§§ ‡§Ü‡§¶‡•á‡§∂", "name_english": "Adarsh Gramsevak Puraskar Order", "is_mandatory": False},
            {"name": "‡§Ü‡§¶‡§∞‡•ç‡§∂ ‡§µ‡•á‡§§‡§®‡§µ‡§æ‡§¢ ‡§Ü‡§¶‡•á‡§∂", "name_english": "Adarsh Gramsevak Puraskar Increment Order", "is_mandatory": False},
            
            # Other service documents
            {"name": "‡§∏‡•á‡§µ‡§æ‡§™‡•Å‡§∏‡•ç‡§§‡§ï ‡§™‡•ç‡§∞‡§§", "name_english": "Service book copy", "is_mandatory": False},
            {"name": "‡§™‡§¶‡•ã‡§®‡•ç‡§®‡§§‡•Ä ‡§Ü‡§¶‡•á‡§∂", "name_english": "Promotion Order", "is_mandatory": False},
            {"name": "‡§ú‡§ø‡§≤‡•ç‡§π‡§æ ‡§¨‡§¶‡§≤‡•Ä ‡§Ö‡§∏‡§≤‡•á‡§∏ ‡§Ü‡§¶‡•á‡§∂ (‡§®‡§æ‡§π‡§∞‡§ï‡§§ ‡§¶‡§æ‡§ñ‡§≤‡§æ)", "name_english": "District Transfer Order (NOC)", "is_mandatory": False},
            
            # Special certificates
            {"name": "‡§¶‡§ø‡§µ‡•ç‡§Ø‡§æ‡§Ç‡§ó ‡§™‡•ç‡§∞‡§Æ‡§æ‡§£‡§™‡§§‡•ç‡§∞", "name_english": "Handicapped Certificate", "is_mandatory": False},
            {"name": "‡§Æ‡§æ‡§®‡•ç‡§Ø‡§§‡§æ ‡§™‡•ç‡§∞‡§Æ‡§æ‡§£‡§™‡§§‡•ç‡§∞ - ‡§ï‡§æ‡§ó‡§¶‡§™‡§§‡•ç‡§∞ ‡§Ø‡•Å‡§®‡§ø‡§Ø‡§® ‡§µ‡•á‡§¨‡§∏‡§æ‡§à‡§ü‡§µ‡§∞ ‡§ü‡§æ‡§ï‡§£‡•á‡§∏‡§æ‡§†‡•Ä", "name_english": "Consent Certificate for Document on Union Domain", "is_mandatory": False},
        ]
        
        for doc_data in document_types_data:
            existing_doc = db.query(DocumentType).filter(DocumentType.name == doc_data["name"]).first()
            if not existing_doc:
                document_type = DocumentType(**doc_data)
                db.add(document_type)
                print(f"  ‚úÖ Created document type: {doc_data['name']}")
            else:
                print(f"  ‚è≠Ô∏è  Document type already exists: {doc_data['name']}")
        
        # 5. Create Districts
        print("üèòÔ∏è  Creating districts...")
        districts_data = [
            {"name": "‡§™‡•Å‡§£‡•á"},      # Pune
            {"name": "‡§Æ‡•Å‡§Ç‡§¨‡§à"},     # Mumbai
            {"name": "‡§®‡§æ‡§ó‡§™‡•Ç‡§∞"},    # Nagpur
            {"name": "‡§ï‡•ã‡§≤‡•ç‡§π‡§æ‡§™‡•Ç‡§∞"}, # Kolhapur
            {"name": "‡§î‡§∞‡§Ç‡§ó‡§æ‡§¨‡§æ‡§¶"}, # Aurangabad
        ]
        
        district_objects = {}
        for district_data in districts_data:
            existing_district = db.query(District).filter(District.name == district_data["name"]).first()
            if not existing_district:
                district = District(**district_data)
                db.add(district)
                db.flush()  # To get the ID
                district_objects[district_data["name"]] = district
                print(f"  ‚úÖ Created district: {district_data['name']}")
            else:
                district_objects[district_data["name"]] = existing_district
                print(f"  ‚è≠Ô∏è  District already exists: {district_data['name']}")
        
        # 6. Create Blocks
        print("üèóÔ∏è  Creating blocks...")
        blocks_data = [
            {"name": "‡§™‡•Å‡§£‡•á ‡§∂‡§π‡§∞", "district_name": "‡§™‡•Å‡§£‡•á"},
            {"name": "‡§π‡§µ‡•á‡§≤‡•Ä", "district_name": "‡§™‡•Å‡§£‡•á"},
            {"name": "‡§Æ‡•Å‡§≥‡§∂‡•Ä", "district_name": "‡§™‡•Å‡§£‡•á"},
            {"name": "‡§¨‡•ã‡§∞‡•Ä‡§µ‡§≤‡•Ä", "district_name": "‡§Æ‡•Å‡§Ç‡§¨‡§à"},
            {"name": "‡§Ö‡§Ç‡§ß‡•á‡§∞‡•Ä", "district_name": "‡§Æ‡•Å‡§Ç‡§¨‡§à"},
        ]
        
        block_objects = {}
        for block_data in blocks_data:
            district = district_objects.get(block_data["district_name"])
            if district:
                existing_block = db.query(Block).filter(
                    Block.name == block_data["name"],
                    Block.district_id == district.id
                ).first()
                if not existing_block:
                    block = Block(
                        name=block_data["name"],
                        district_id=district.id
                    )
                    db.add(block)
                    db.flush()
                    block_objects[f"{block_data['district_name']}-{block_data['name']}"] = block
                    print(f"  ‚úÖ Created block: {block_data['name']} in {block_data['district_name']}")
                else:
                    block_objects[f"{block_data['district_name']}-{block_data['name']}"] = existing_block
                    print(f"  ‚è≠Ô∏è  Block already exists: {block_data['name']}")
        
        # 7. Create Gram Panchayats
        print("üèõÔ∏è  Creating gram panchayats...")
        gp_data = [
            {"name": "‡§ï‡§∞‡•ç‡§µ‡•á ‡§®‡§ó‡§∞", "block_key": "‡§™‡•Å‡§£‡•á-‡§™‡•Å‡§£‡•á ‡§∂‡§π‡§∞"},
            {"name": "‡§∂‡§ø‡§µ‡§æ‡§ú‡•Ä ‡§®‡§ó‡§∞", "block_key": "‡§™‡•Å‡§£‡•á-‡§™‡•Å‡§£‡•á ‡§∂‡§π‡§∞"},
            {"name": "‡§π‡§µ‡•á‡§≤‡•Ä ‡§ó‡§æ‡§µ", "block_key": "‡§™‡•Å‡§£‡•á-‡§π‡§µ‡•á‡§≤‡•Ä"},
            {"name": "‡§Æ‡•Å‡§≥‡§∂‡•Ä ‡§ó‡§æ‡§µ", "block_key": "‡§™‡•Å‡§£‡•á-‡§Æ‡•Å‡§≥‡§∂‡•Ä"},
        ]
        
        gp_objects = {}
        for gp_data_item in gp_data:
            block = block_objects.get(gp_data_item["block_key"])
            if block:
                existing_gp = db.query(GramPanchayat).filter(
                    GramPanchayat.name == gp_data_item["name"],
                    GramPanchayat.block_id == block.id
                ).first()
                if not existing_gp:
                    gp = GramPanchayat(
                        name=gp_data_item["name"],
                        block_id=block.id
                    )
                    db.add(gp)
                    db.flush()
                    gp_objects[gp_data_item["name"]] = gp
                    print(f"  ‚úÖ Created gram panchayat: {gp_data_item['name']}")
                else:
                    gp_objects[gp_data_item["name"]] = existing_gp
                    print(f"  ‚è≠Ô∏è  Gram panchayat already exists: {gp_data_item['name']}")
        
        # 8. Create Default Super Admin User
        print("üë§ Creating default users...")
        pune_district = district_objects.get("‡§™‡•Å‡§£‡•á")
        pune_city_block = block_objects.get("‡§™‡•Å‡§£‡•á-‡§™‡•Å‡§£‡•á ‡§∂‡§π‡§∞")
        karve_nagar_gp = gp_objects.get("‡§ï‡§∞‡•ç‡§µ‡•á ‡§®‡§ó‡§∞")
        
        if pune_district and pune_city_block and karve_nagar_gp:
            existing_admin = db.query(User).filter(User.email == "admin@gramseva.gov.in").first()
            if not existing_admin:
                admin_user = User(
                    first_name="‡§∏‡•Å‡§™‡§∞",
                    last_name="‡§Ö‡•Ö‡§°‡§Æ‡§ø‡§®",
                    email="admin@gramseva.gov.in",
                    mobile_number="+919999999999",
                    whatsapp_number="+919999999999",
                    role_id=1,  # superAdmin
                    designation=UserDesignation.VISTAR_ADHIKARI,
                    district_id=pune_district.id,
                    block_id=pune_city_block.id,
                    gram_panchayat_id=karve_nagar_gp.id,
                    status=ApprovalStatus.APPROVED,
                    documents_uploaded=True,
                )
                db.add(admin_user)
                print(f"  ‚úÖ Created super admin user: admin@gramseva.gov.in")
            else:
                print(f"  ‚è≠Ô∏è  Super admin already exists")
        
        # Commit all changes
        db.commit()
        print("‚ú® Seed data creation completed successfully!")
        
        # Print summary
        print("\nüìä Summary:")
        print(f"  Roles: {db.query(Role).count()}")
        print(f"  Departments: {db.query(Department).count()}")
        print(f"  Yojanas: {db.query(Yojana).count()}")
        print(f"  Document Types: {db.query(DocumentType).count()}")
        print(f"  Districts: {db.query(District).count()}")
        print(f"  Blocks: {db.query(Block).count()}")
        print(f"  Gram Panchayats: {db.query(GramPanchayat).count()}")
        print(f"  Users: {db.query(User).count()}")
        
    except Exception as e:
        print(f"‚ùå Error creating seed data: {e}")
        db.rollback()
        raise
    finally:
        db.close()


if __name__ == "__main__":
    create_seed_data()